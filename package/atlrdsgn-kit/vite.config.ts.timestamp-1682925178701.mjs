// vite.config.ts
import { resolve } from "path";
import { defineConfig } from "file:///Users/chvndler/Projects/atlr.dsgn/atelierkit/node_modules/vite/dist/node/index.js";
import react from "file:///Users/chvndler/Projects/atlr.dsgn/atelierkit/node_modules/@vitejs/plugin-react/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.2.0",
  "react-dom": "^18.2.0"
};

// vite.config.ts
import { vanillaExtractPlugin } from "file:///Users/chvndler/Projects/atlr.dsgn/atelierkit/node_modules/@vanilla-extract/vite-plugin/dist/vanilla-extract-vite-plugin.cjs.js";
import banner from "file:///Users/chvndler/Projects/atlr.dsgn/atelierkit/node_modules/vite-plugin-banner/dist/index.mjs";
import dts from "file:///Users/chvndler/Projects/atlr.dsgn/atelierkit/node_modules/vite-plugin-dts/dist/index.mjs";
var __vite_injected_original_dirname = "/Users/chvndler/Projects/atlr.dsgn/atelierkit/package/atlrdsgn-kit";
var peers = Object.keys(peerDependencies);
var primitiveDeps = [
  "@radix-ui/react-avatar",
  "@radix-ui/react-menubar",
  "@radix-ui/react-switch",
  "@radix-ui/react-tooltip"
];
var vite_config_default = defineConfig({
  build: {
    sourcemap: true,
    rollupOptions: {
      external: [...peers, ...primitiveDeps],
      output: {
        globals: {
          react: "React",
          "react-dom": "ReactDom",
          /**
           *
           * named globals for dependencies.
           */
          "@radix-ui/react-avatar": "AVI",
          "@radix-ui/react-menubar": "MBAR",
          "@radix-ui/react-switch": "SWI",
          "@radix-ui/react-tooltip": "TIP"
        }
      }
    },
    lib: {
      /**
       *
       * entry point for the package,
       * in library mode.
       *
       * https://vitejs.dev/guide/build.html#library-mode
       *
       */
      entry: resolve(__vite_injected_original_dirname, "src/index.ts"),
      name: "kit",
      fileName: "index",
      formats: ["cjs", "es", "umd"]
    }
  },
  plugins: [
    react(),
    banner(`
    atelierkit\xA9 v${process.env.npm_package_version}. 
    All rights reserved.
    
    see https://docs.atlrdsgn.com for more information.
    `),
    dts({
      outputDir: "dist/types",
      beforeWriteFile: (filePath, content) => ({
        content,
        filePath: filePath.replace("src", "")
      }),
      compilerOptions: {
        baseUrl: "./src/",
        emitDeclarationOnly: true,
        noEmit: false
      },
      include: ["src"],
      exclude: []
    }),
    vanillaExtractPlugin({
      /**
       *
       * identifier option can be set
       * to 'short' or 'debug' to control
       * how class names are generated.
       */
      identifiers: "debug"
    })
  ]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
