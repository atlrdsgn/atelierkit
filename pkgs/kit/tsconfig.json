{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "include": ["src"],
  "compilerOptions": {
    "rootDir": "src",
    "sourceMap": true,
    /**
     * "outDir": "dist/types",
     *
     * Note: When using a shared tsconfig.json, typescript incorrectly
     * resolves 'outDir' relative to the tsconfig.json file.
     *
     * see: https://github.com/Microsoft/TypeScript/issues/29172
     */
    "outDir": "dist/types",
    "declaration": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    /**
     * Enable constraints that allow a TypeScript project to be used with project references.
     * see: https://www.typescriptlang.org/tsconfig#composite
     */
    "composite": true,
    /**
     * Emit additional JavaScript to ease support for importing CommonJS modules.
     * This enables allowSyntheticDefaultImports for type compatibility.
     * see: https://www.typescriptlang.org/tsconfig#esModuleInterop
     */
    "esModuleInterop": true,
    /**
     * Allow default imports from modules with no default export.
     * This does not affect code emit, just typechecking.
     * see: https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports
     */
    "allowSyntheticDefaultImports": true,
    /**
     * Ensure that casing is correct in imports.
     * see: https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames
     */
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true,
    "jsx": "react-jsx",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "module": "ESNext",
    "target": "es6",
    "resolveJsonModule": true,
    "allowJs": true,
    "noImplicitAny": false
  }
}
